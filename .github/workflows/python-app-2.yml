name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ./example-app
        
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12.1
      uses: actions/setup-python@v3
      with:
        python-version: "3.12.1"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
    - name: Install Poetry on Linux
      if: runner.os == 'Linux'
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH
    - name: Install Poetry on Windows
      if: runner.os == 'Windows'
      run: |
        (Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | python -
        echo "$env:APPDATA\Python\Scripts" >> $GITHUB_PATH
    - name: Cache build venv
      uses: actions/cache@v3
      with:
        path: ./example-app/.venv
        key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}
  static_tests:
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        test_type: ['lint', 'formatter', 'security']
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install Poetry (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install Poetry (Windows)
        if: runner.os == 'Windows'
        run: |
          (Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | python -
          echo "$env:APPDATA\Python\Scripts" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
      - name: Cache build venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: ./example-app/.venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}
          
      - name: Install Dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        working-directory: ./example-app
        run: poetry install --no-root
        
      - name: Run ${{ matrix.test_type }}
        working-directory: ./example-app
        run: poetry run task ${{ matrix.test_type }}
  unittests:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    needs: [static_tests]
    defaults:
      run:
        working-directory: ./example-app

    steps:
      - name: Install Poetry (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install Poetry (Windows)
        if: runner.os == 'Windows'
        run: |
          (Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | python -
          echo "$env:APPDATA\Python\Scripts" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: Cache build venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: ./example-app/.venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}
      - name: Install Dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        working-directory: ./example-app
        run: poetry install --no-root
      - name: Run tests
        run: poetry run task test
