name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ./example-app
        
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12.1
      uses: actions/setup-python@v3
      with:
        python-version: "3.12.1"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
    - name: Install Poetry on Linux
      if: runner.os == 'Linux'
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH
    - name: Install Poetry on Windows
      if: runner.os == 'Windows'
      run: |
        (Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | python -
        echo "$env:APPDATA\Python\Scripts" >> $GITHUB_PATH
    - name: Cache build venv
      uses: actions/cache@v3
      with:
        path: ./example-app/.venv
        key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}
      restore-keys: |
        ${{ runner.os }}-venv-

  formatter:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    needs: build
    defaults:
      run:
        working-directory: ./example-app

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12.1
      uses: actions/setup-python@v3
      with:
        python-version: "3.12.1"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
    - name: Cache build venv
      uses: actions/cache@v3
      with:
        path: ./example-app/.venv
        key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}
    - name: Run formatter
      run: poetry run task formatter

  security:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    needs: build
    defaults:
      run:
        working-directory: ./example-app

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12.1
      uses: actions/setup-python@v3
      with:
        python-version: "3.12.1"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
    - name: Cache build venv
      uses: actions/cache@v3
      with:
        path: ./example-app/.venv
        key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}
    - name: Run security checks
      run: poetry run task security

  lint:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    needs: build
    defaults:
      run:
        working-directory: ./example-app

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12.1
      uses: actions/setup-python@v3
      with:
        python-version: "3.12.1"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
    - name: Cache build venv
      uses: actions/cache@v3
      with:
        path: ./example-app/.venv
        key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}
    - name: Run linting
      run: poetry run task lint

  unittests:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    needs: [formatter, security, lint]
    defaults:
      run:
        working-directory: ./example-app

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12.1
      uses: actions/setup-python@v3
      with:
        python-version: "3.12.1"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
    - name: Cache build venv
      uses: actions/cache@v3
      with:
        path: ./example-app/.venv
        key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}
    - name: Run tests
      run: poetry run task test
